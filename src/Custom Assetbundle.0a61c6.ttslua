-- UI elements for the table

-- Tracks the players currently in queue
queue = {}

-- Tracks color switching
seatTracker =
{
  ["Blue"]    = false,
  ["Teal"]    = false,
  ["Purple"]  = false,
  ["Green"]   = false,
  ["White"]   = false,

  ["Red"]     = false,
  ["Orange"]  = false,
  ["Yellow"]  = false,
  ["Pink"]    = false,
  ["Brown"]   = false
}

redColor = {0.856, 0.1, 0.094}

function onLoad(saveState)
  if saveState != "" then
    local decodedSaveState = JSON.decode(saveState)

    queue = decodedSaveState.queue
    updateQueue()
  end

  -- Update the tracker with vacant seats and show buttons for available seats
  for seatColor,_ in pairs(seatTracker) do
    if Player[seatColor].seated then
      seatTracker[seatColor] = true
    else
      seatTracker[seatColor] = false

      -- Show the button to switch seats
      self.UI.setAttribute("sit" .. seatColor, "active", true)
    end
  end
end

function onSave()
  local saveData = {}

  saveData.queue  = queue

  return JSON.encode(saveData)
end

function votePass(player)
  Global.call("votePass", player.color)
end

function onPlayerChangeColor(color)
  local switcherEnabled = Global.call("getSwitcher")

  if not switcherEnabled then
    return
  end

  for seatColor,_ in pairs(seatTracker) do
    if Player[seatColor].seated != seatTracker[seatColor] then
      seatTracker[seatColor] = Player[seatColor].seated
      self.UI.setAttribute("sit" .. seatColor, "active", not seatTracker[seatColor])
    end
  end
end

function onPlayerConnect(player)
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      queuePlayer.steam_name = player.steam_name
      updateQueue()
      break
    end
  end
end

function updateSettings()
  shuffle(nil,     Global.call("getShuffle") == true and "True" or "False")
  queues(nil,      Global.call("getQueue") == true and "True" or "False")
  switcher(nil,    Global.call("getSwitcher") == true and "True" or "False")
  tilting(nil,     Global.call("getTilting") == true and "True" or "False")
  --afk(player)
  --afkTime(player)
  timer(nil,       Global.call("getTimer") == true and "True" or "False")
  timer1Time(nil,  Global.call("getTimer1Time"))
  timer2Time(nil,  Global.call("getTimer2Time"))
  autokick(nil,    Global.call("getAutokick") == true and "True" or "False")
end

function reloadUI(player)
  if lastReloadUI == nil or Time.time - lastReloadUI > 5 then
	  self.UI.setXml(self.UI.getXml())
	  Global.call("reloadCardUI")
	  printToAll(player.steam_name .. " has reloaded the UI!", redColor)
  end
  lastReloadUI = Time.time
end

---------------------------------------------------------------
---------------------------[ TIMER ]---------------------------
---------------------------------------------------------------
function startTimer(time)
  -- Cancel any existing timers
  if currentTimer then
    stopTimer(false)
  end

  local minutes = math.floor(time / 60)
  local seconds = time % 60

  timeLeft = time

  local timerColor = "White"
  if timeLeft <= 10 then
    timerColor = "Red"
    broadcastToAll("[a020f0]» [ffffff]" .. (timeLeft == 0 and "Time's up!" or (tostring(timeLeft) .. " seconds remaining!")) .. " [a020f0]«")
  elseif timeLeft <= 30 then
    timerColor = "Yellow"
  end

  -- Set the correct time on the clock
  self.UI.setAttributes("time", {
    text  = tostring(minutes) .. ":" .. (seconds < 10 and ("0" .. tostring(seconds)) or tostring(seconds)),
    color = timerColor
  })

  -- Set the toggle button to the correct text
  self.UI.setAttributes("timerControl", {
    text      = "ll",
    fontStyle = "Bold"
  })

  -- Start the countdown
  currentTimer = Wait.time(tickTimer, 1, time)
end

function tickTimer()
  -- Tick the timer down by 1 second
  timeLeft = timeLeft - 1

  local minutes = math.floor(timeLeft / 60)
  local seconds = timeLeft % 60

  local timerColor = "White"
  if timeLeft <= 10 then
    timerColor = "Red"

    -- Play the ticking sound
    self.AssetBundle.playTriggerEffect(3)

    broadcastToAll("[a020f0]» [ffffff]" .. (timeLeft == 0 and "Time's up!" or (tostring(timeLeft) .. " seconds remaining!")) .. " [a020f0]«")
  elseif timeLeft <= 30 then
    timerColor = "Yellow"
  end

  -- Set the correct time on the clock
  self.UI.setAttributes("time", {
    text  = tostring(minutes) .. ":" .. (seconds < 10 and ("0" .. tostring(seconds)) or tostring(seconds)),
    color = timerColor
  })

  -- Swap turns if time expired
  if timeLeft == 0 then
    Global.call("timeExpired")
  end

end

function toggleTimer(player, button)
  if player.color == "Grey" or button ~= "-1" then
    return
  end

  if player.color ~= "Red" and player.color ~= "Blue" and not player.admin then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may control the timer! [a020f0]«")
    return
  end

  -- Pause/start the current timer if it exists
  if currentTimer then
    -- Pause the current timer
    stopTimer(false)

    -- Change the toggle button text
    self.UI.setAttributes("timerControl", {
      text      = "▶",
      fontStyle = "Normal"
    })
  else
    -- Start the previous timer (if one existed)
    if timeLeft and (timeLeft > 0) then
      startTimer(timeLeft)

      -- Change the toggle button text
      self.UI.setAttributes("timerControl", {
        text      = "ll",
        fontStyle = "Bold"
      })
    end
  end

end

function stopTimer(endGame)
  if currentTimer then
    Wait.stop(currentTimer)
    currentTimer = nil
  end

  if endGame then
    timeLeft = nil

    -- Set the correct time on the clock
    self.UI.setAttributes("time", {
      text  = "0:00",
      color = "Red"
    })

    -- Set the toggle button to the correct text
    self.UI.setAttributes("timerControl", {
      text      = "▶",
      fontStyle = "Normal"
    })
  end
end

---------------------------------------------------------------
--------------------[ GAME SETTINGS PANEL ]--------------------
---------------------------------------------------------------
function shuffle(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("shuffle", "isOn", self.UI.getAttribute("shuffle", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setShuffle", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("shuffle", "isOn", toboolean(enabled))
end

function queues(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("queues", "isOn", self.UI.getAttribute("queues", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setQueue", toboolean(enabled))

  -- Hide/show the queue
  self.UI.setAttribute("codemasterQueue", "active", toboolean(enabled))
  if not enabled then
    queue = {}
  end
  updateQueue()

  -- Update the view for everyone
  self.UI.setAttribute("queues", "isOn", toboolean(enabled))
end

function switcher(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("switcher", "isOn", self.UI.getAttribute("switcher", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setSwitcher", toboolean(enabled))

  local colors =
  {
    "Blue",
    "Red",
    "Teal",
    "Orange",
    "Purple",
    "Yellow",
    "Green",
    "Pink",
    "White",
    "Brown"
  }
  for _, color in ipairs(colors) do
    if toboolean(enabled) then
      if Player[color].seated then
        self.UI.setAttribute("sit" .. color, "active", false)
      else
        self.UI.setAttribute("sit" .. color, "active", toboolean(enabled))
      end
    else
      self.UI.setAttribute("sit" .. color, "active", toboolean(enabled))
    end
  end

  -- Update the view for everyone
  self.UI.setAttribute("switcher", "isOn", toboolean(enabled))
end

function tilting(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("tilting", "isOn", self.UI.getAttribute("tilting", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setTilting", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("tilting", "isOn", toboolean(enabled))
end

function afk(player)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("afk", "isOn", self.UI.getAttribute("afk", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setAfk", toboolean(enabled))

  -- Update the promoted player view
  self.UI.setAttribute("afk", "isOn", toboolean(enabled))
end

function afkTime(player)
  if player ~= nil and not player.admin then
    return
  end
end

function timer(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer", "isOn", self.UI.getAttribute("timer", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setTimer", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("timer", "isOn", toboolean(enabled))
end

function timer1Time(player, value)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer1Time", "value", self.UI.getAttribute("timer1Time", "value"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setTimer1Time", tonumber(value))

  -- Update the view for everyone
  self.UI.setAttribute("timer1Time", "value", tonumber(value))
  self.UI.setAttribute("timer1TimeValue", "text", value)
end

function timer2Time(player, value)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("timer2Time", "value", self.UI.getAttribute("timer2Time", "value"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setTimer2Time", tonumber(value))

  -- Update the view for everyone
  self.UI.setAttribute("timer2Time", "value", tonumber(value))
  self.UI.setAttribute("timer2TimeValue", "text", value)
end

function autokick(player, enabled)
  if player ~= nil and not player.admin then
    self.UI.setAttribute("autokick", "isOn", self.UI.getAttribute("autokick", "isOn"))
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«")
    return
  end

  -- Handle in the Global script
  Global.call("setAutokick", toboolean(enabled))

  -- Update the view for everyone
  self.UI.setAttribute("autokick", "isOn", toboolean(enabled))
end


---------------------------------------------------------------
--------------------[ DECK SELECTOR PANEL ]--------------------
---------------------------------------------------------------
function setDeck(player, deck, button)
  if player.color == "Grey" then
    return
  end

  if player.color == "Red" or player.color == "Blue" or player.admin then
    Global.call("setDeck", deck)

    local multipleDeckMode = Global.call("getMultipleDeckMode")
    for i = 1, 20, 1 do
      local buttonName = "deck" .. i .. "Button"
      if buttonName == button then
        local currentColor = self.UI.getAttribute(buttonName, "color")
        if multipleDeckMode and currentColor == "#aaeaa7" then
          self.UI.setAttribute(buttonName, "color", "#ffffff")
        else
          self.UI.setAttribute(buttonName, "color", "#aaeaa7")
        end
      else
        if not multipleDeckMode then
          self.UI.setAttribute(buttonName, "color", "#ffffff")
        end
      end
    end
  else
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may select a deck! [a020f0]«")
  end
end

function startGame(player, button)
  if player.color == "Grey" or button ~= "-1" then
    return
  end

  if player.color == "Red" or player.color == "Blue" or player.admin then
    Global.call("startGame", player)
  else
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may start the game! [a020f0]«")
  end
end

function refreshDecks(player, button)
  if player.color == "Grey" or button ~= "-1" then
    return
  end

  Global.call("api_getDecks", player)
  player.broadcast("[a020f0]» [ffffff]Deck list refreshed! [a020f0]«", redColor)
end

function deckMode(player, button)
  if player.color == "Grey" or button ~= "-1" then
    return
  end

  if player.color == "Red" or player.color == "Blue" or player.admin then
    Global.call("toggleDeckMode", player)
  else
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may change the deck mode! [a020f0]«")
  end

  local multipleDeckMode = Global.call("getMultipleDeckMode")

  if not multipleDeckMode then
    Global.call("setDeck", nil)
    for i = 1, 20, 1 do
      local buttonName = "deck" .. i .. "Button"
      self.UI.setAttribute(buttonName, "color", "#ffffff")
    end
  end

  if multipleDeckMode then
    self.UI.setAttribute("deckModeSwitch", "color", "#96e592")
    player.broadcast("[a020f0]» [ffffff]Multiple deck mode: [31b32b]ENABLED [a020f0]«")
  else
    self.UI.setAttribute("deckModeSwitch", "color", "#ffffff")
    player.broadcast("[a020f0]» [ffffff]Multiple deck mode: [da1918]DISABLED [a020f0]«")
  end
end


------------------------------------------------------------------
--------------------[ CODEMASTER QUEUE PANEL ]--------------------
------------------------------------------------------------------
function join(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«")
    return
  end

  -- Check to see if the player already exists in the queue
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      if queuePlayer.stay then
        queuePlayer.stay = false
        updateQueue()
      end
      return
    end
  end

  if #queue >= 10 then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«")
    return
  end

  -- Join the player to the queue and make them stay
  table.insert(queue, {
    steam_id   = player.steam_id,
    steam_name = player.steam_name,
    stay       = false
  })
  updateQueue()
end

function stay(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«")
    return
  end

  -- Check to see if the player already exists in the queue
  for _,queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      if not queuePlayer.stay then
        queuePlayer.stay = true
        updateQueue()
      end
      return
    end
  end

  if #queue >= 10 then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«")
    return
  end

  -- Join the player to the queue and make them stay
  table.insert(queue, {
    steam_id   = player.steam_id,
    steam_name = player.steam_name,
    stay       = true
  })
  updateQueue()
end

function leave(player, button)
  if button ~= "-1" then
    return
  end

  if player.color == "Grey" or player.color == "Black" then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only seated players may leave the queue! [a020f0]«")
    return
  end

  -- Check to see if the player already exists in the queue
  for i, queuePlayer in ipairs(queue) do
    if queuePlayer.steam_id == player.steam_id then
      table.remove(queue, i)
      updateQueue()
      return
    end
  end
end

function remove(player, queuePosition)
  if player ~= nil and not player.admin then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may remove player from the queue! [a020f0]«")
    return
  end

  -- Remove this player from the queue
  local removedPlayer = findPlayerBySteamID(table.remove(queue, queuePosition).steam_id)
  updateQueue()

  if removedPlayer ~= nil then
    -- Notify the player they've been removed
    removedPlayer.broadcast("[a020f0]» [ffffff]" .. player.steam_name .. " has removed you from the codemaster queue! [a020f0]«")
  end
end


----------------------------------------------------------
--------------------[ COLOR SWITCHER ]--------------------
----------------------------------------------------------
function changeSeat(player, to)
  if player.color == "Grey" or player.color == "Black" then
    return
  end

  -- Ensure the seat is empty
  if Player[to].seated then
    player.broadcast("[a020f0]» [da1918]ERROR: [ffffff]" .. to .. " seat is not empty! [a020f0]«")
    return
  end

  player.changeColor(to)
end


-------------------------------------------------------------
--------------------[ UTILITY FUNCTIONS ]--------------------
-------------------------------------------------------------
function toboolean(string)
  if string == "True" then
    return true
  elseif string == "False" then
    return false
  else
    return nil
  end
end

----------------------------------------------------------------------------------------------------------------------
function updateQueue()
  for i=1,10,1 do
    if queue[i] ~= nil then
      self.UI.setAttribute("queueText" .. i, "text", queue[i].steam_name)
      self.UI.setAttributes("queueButton" .. i, {
        active  = true,
        color   = queue[i].stay and "#96e592" or "White"
      })
    else
      self.UI.setAttributes("queueButton" .. i, {
        active  = false,
        color   = "White"
      })
      self.UI.setAttribute("queueText" .. i, "text", "")
    end
  end
end

function shufflePlayers()

  -- Whether or not the codemaster queue is enabled
  local queueEnabled = Global.call("getQueue")

  -- Colors to use when sitting people
  local colorPool =
  {
    "Blue",
    "Red",
    "Teal",
    "Orange",
    "Purple",
    "Yellow",
    "Green",
    "Pink",
    "White",
    "Brown"
  }
  local colors = {}

  -- Get all current seated players to shuffle and stand them
  local seatedPlayers = {}
  for _, player in ipairs(Player.getPlayers()) do
    if player.color ~= "Grey" and player.color ~= "Black" then
      table.insert(seatedPlayers, player)
      player.changeColor("Grey")
      coroutine.yield(0)

      -- Add a color to the list of colors
      table.insert(colors, (#seatedPlayers % 2 == 0) and table.remove(colorPool, 1) or table.remove(colorPool, math.random(1, 2)))
    end
  end

  local requeue = {}
  local numCodemasters = 0

  while #seatedPlayers > 0 do
    local nextPlayer
    if queueEnabled and numCodemasters < 2 and #queue > 0 then
      -- Draw from the queue first
      local nextInQueue
      while #queue > 0 do
        nextInQueue = table.remove(queue, 1)
        nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)

        if nextPlayer ~= nil then
          -- Check to see they were seated
          local seated = false
          for i, player in ipairs(seatedPlayers) do
            if player.steam_id == nextPlayer.steam_id then
              seated = true
              table.remove(seatedPlayers, i)
              break
            end
          end

          if seated and not nextPlayer.blindfolded then
            if nextInQueue.stay then
              table.insert(requeue, nextPlayer)
            end
            -- We found a valid player - break
            numCodemasters = numCodemasters + 1
            break
          else
            nextPlayer.broadcast("[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«")
          end
        end
      end
    elseif #seatedPlayers > 0 then
      nextPlayer = table.remove(seatedPlayers, math.random(1, #seatedPlayers))
    else
      -- No more players to seat
      break
    end

    -- Seat the next player
    nextPlayer.changeColor(table.remove(colors, 1))
    coroutine.yield(0)
  end

  -- Requeue players if unnecessary
  for _, requeuePlayer in ipairs(requeue) do
    table.insert(queue, {
      steam_id   = requeuePlayer.steam_id,
      steam_name = requeuePlayer.steam_name,
      stay       = true
    })
  end
  updateQueue()
  Global.call("api_gameStart")
  return 1
end

function swapCodemasters()

  local colorPool =
  {
    "Blue",
    "Red"
  }

  local requeue = {}

  local nextInQueue
  while #queue > 0 and #colorPool > 0 do
    nextInQueue = table.remove(queue, 1)
    nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)

    if nextPlayer ~= nil then
      -- Check to see they were seated
      if nextPlayer.seated and not nextPlayer.blindfolded then
        if nextInQueue.stay then
          table.insert(requeue, nextPlayer)
        end
        -- We found a valid player - break
        local codemasterSeat = table.remove(colorPool, math.random(1, #colorPool))
        local oldCodemaster = Player[codemasterSeat]
        if oldCodemaster.seated then
          local switchColor = nextPlayer.color
          nextPlayer.changeColor("Grey")
          coroutine.yield(0)
          oldCodemaster.changeColor(switchColor)
          coroutine.yield(0)
        end
        nextPlayer.changeColor(codemasterSeat)
        coroutine.yield(0)
      else
        nextPlayer.broadcast("[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«")
      end
    end
  end

  -- Requeue players if unnecessary
  for _, requeuePlayer in ipairs(requeue) do
    table.insert(queue, {
      steam_id   = requeuePlayer.steam_id,
      steam_name = requeuePlayer.steam_name,
      stay       = true
    })
  end
  updateQueue()
  Global.call("api_gameStart")
  return 1
end

function findPlayerBySteamID(steam_id)
  for _, player in ipairs(Player.getPlayers()) do
    if player.steam_id == steam_id then
      return player
    end
  end
  return nil
end